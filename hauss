#include <iostream>
#include <cstdlib>
using namespace std;

void printer(double** arr, double* X, int n, int m);

void freeMem(double** arr, double* X, int n);

void hauss(double** arr, double* X, int n, int m);

int main()
{
	int n, m;
	cin >> n >> m;
	if (n < m) {
		cout << "INF";
		return 0;
	}
	double** system = new double* [n];
	for (int i = 0; i < n; i++) {
		system[i] = new double[m];
	}
	double* X = new double[n];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> system[i][j];
		}
        cin >> X[i];
	}

	hauss(system, X, n, m);
	printer(system, X, n, m);
	freeMem(system, X, n);
	return 0;
}

void printer(double** arr, double* X, int n, int m) {
	cout << endl;
	for (int i = 0; i < n; i++) {
	    cout << "(";
		for (int j = 0; j < m; j++) {
			cout << arr[i][j] << " ";
		}
		cout << "| ";
		cout << X[i] << " )";
		cout << endl;
	}
}

void freeMem(double** arr, double* X, int n) {
	for (int i = 0; i < n; i++) {
		delete [] arr[i];
	}
	delete[] arr;
	delete[] X;
}

void hauss(double** arr, double* X, int n, int m) {
	double delta = 0, epsilon = 0.0000001;
	for(int e = 0; e < n - 1; e++) {
        for (int i = 1 + e; i < n; i++) {
            delta = arr[i][e] / arr[e][e];
            X[i] = X[i] - delta*X[e];
            if (abs(X[i]) - epsilon < 0) {
                X[i] = 0;
            }
            for (int j = 0; j < m; j++) {
                arr[i][j] = arr[i][j] - delta * arr[e][j];
                if (abs(arr[i][j]) - epsilon < 0) {
                    arr[i][j] = 0;
                }
            }
        }
    }

    X[n - 1] = X[n - 1]/arr[n - 1][m - 1];
	arr[n - 1][m - 1] = 1;

	/*тут должна быть проверка на нулевую строку*/
	//обратный ход
	for(int e = 0; e < n - 1; e++){
	    for(int i = 1 + e; i < n; i++){
	        delta = arr[n - 1 - i][m - 1 - e]/arr[n - 1 - e][m - 1 - e];
            X[n - 1 - i] = X[n - 1 - i] - delta*X[n - 1 - e];
            if (abs(X[n - 1 - i]) - epsilon < 0) {
                X[n - 1 - i] = 0;
            }
            arr[n - 1 - i][m - 1 - e] = arr[n - 1 - i][m - 1 - e] - delta * arr[n - 1 - e][m - 1 - e];
	    }
        X[n - 2 - e] = X[n - 2 - e]/arr[n - 2 - e][m - 2 - e];
	    arr[n - 2 - e][m - 2 - e] = 1;
	}
}
