function res = f(x)
  res = cos(x - sin(x));
endfunction

function I = rect(n, a, b)
  summ = 0;
  h = (b-a)/n;
  nodes = linspace(a, b, n + 1);
  for i =1:length(nodes)-1
    summ += f(nodes(i) + h/2);
  endfor  
  I = h*summ;
endfunction

function Int = RungeRect(eps)
  a = 0;
  b = pi();
  iter = 1;
  n = 2;
  printf("Iter = %d\nn = %d\nintegral = %0.14f\n", iter, n, (rect(2*n, a, b) + abs(rect(2*n, a, b) - rect(n, a , b))/3));
  while((abs(rect(2*n, a, b) - rect(n, a, b))/3) >= eps)
    iter++;
    n = n*2;
    printf("Iter = %d\nn = %d\nintegral = %0.14f\n", iter, n, (rect(2*n, a, b) + abs((rect(2*n, a, b) - rect(n, a , b))/3)));
  endwhile
endfunction

function I = trap(n, a, b)
  summ = 0;
  h = (b-a)/n;
  nodes = linspace(a, b, n + 1);
  for i =1:length(nodes)-1
    summ += f(nodes(i)) + f(nodes(i+1));
  endfor  
  I = (h/2)*summ;
endfunction

function Int = RungeTrap(eps)
  a = 0;
  b = pi();
  iter = 1;
  n = 2;
  printf("Iter = %d\nn = %d\nintegral = %0.14f\n", iter, n, (trap(2*n, a, b) - abs(trap(2*n, a, b) - trap(n, a, b))/3));
  while(abs(trap(2*n, a, b) - trap(n, a, b))/3 >= eps)
    iter++;
    n = n*2;
    printf("Iter = %d\nn = %d\nintegral = %0.14f\n", iter, n, (trap(2*n, a, b) - abs(trap(2*n, a, b) - trap(n, a, b))/3));
  endwhile
endfunction

function I = simps(n, a, b)
  summ = 0;
  h = (b-a)/n;
  nodes = linspace(a, b, n + 1);
  for i=1:n/2-1
    summ += f(nodes(2*i)) + 4*f(nodes(2*i+1)) + f(nodes(2*i+2));
  endfor  
  I = (h/3)*summ;
endfunction

function Int = RungeSimps(eps)
  a = 0;
  b = pi();
  iter = 1;
  n = 2;
  printf("Iter = %d\nn = %d\nintegral = %0.14f\n", iter, n, (simps(2*n, a, b) - abs(simps(2*n, a, b) - simps(n, a, b))/15));
  while(abs(simps(2*n, a, b) - simps(n, a, b))/15 > eps)
    iter++;
    n = n*2;
    printf("Iter = %d\nn = %d\nintegral = %0.14f\n", iter, n, (simps(2*n, a, b) - abs(simps(2*n, a, b) - simps(n, a, b))/15));
  endwhile
endfunction

/*Hauss*/

function res = P(n, x)
  p0 = 1;
  p1 = x;
  if n == 0
    res = 1;
    return;
  endif
  if n == 1
    res = x;
    return;
  endif
  p_new = 0;
  i = 1;
  while(i < n)
    p_new = (2*i+1)*p1*x/(i+1) - i*p0/(i+1);
    p0 = p1;
    p1 = p_new;
    i++;
  endwhile
  res = p_new;
endfunction

function res = P1(n, x)
  res = (n*x*P(n, x))/(x^2 - 1) - (n*P(n-1, x)/(x^2 - 1));
endfunction

function res = newton(n, x0)
  eps = 0.01;
  xNew = x0 - (P(n, x0))/P1(n, x0);
  x = x0;
  while(abs(xNew - x) > eps)  
    x = xNew;   
    f = P(n, x);   
    df = P1(n, x);  
    xNew = x - f/df;
    if(f == 0)
      res = x
      break;
    endif     
  endwhile
  res = xNew;
endfunction

function res = omega(j, n)
  res = 2/((1 - (newton(n, cos(pi()*(4*j - 1)/(4*n + 2))))^2)*(P1(n, newton(n, cos(pi()*(4*j - 1)/(4*n + 2)))))^2);
endfunction

function res = Gauss(eps, n)
  a = 0;
  b = pi();
  summ = 0;
  for i=1:n
    summ += omega(i, n)*f((a+b)/2 + ((b-a)/2)*newton(n, cos(pi()*(4*i - 1)/(4*n + 2))));
  endfor  
  res = summ*(b-a)/2;
endfunction
