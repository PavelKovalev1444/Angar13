#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* ReadSentence();

char* DelTab(char* s);

char* DelProbel(char* s);

int DoubleSentence(char** arr, int* n);

void function_1(char** arr, int* n, char* date);

int main(){
	char** arr = malloc(10*sizeof(char*));
	int size = 10;
	int n = 0;
	char* s;
	char date[7];
	while(1){
		s = ReadSentence();
		if(strcmp(s, "\n") == 0){
			break;
		}
		if(n == size -1){
			size += 10;
			arr = realloc(arr, sizeof(char*)*size);
		}
		s = DelTab(s);
		arr[n] = DelProbel(s);
		n++;
	}
        DoubleSentence(arr, &n);
	printf("\n\n========================================================================\n");
	for(int i = 0; i<n; i++){
		printf("|\t\t\t{%s}\t\t\t\t\t|\n", arr[i]);
	}
	printf("========================================================================\n\n");
	printf("      Здравствуйте! Введите число от 1 до 4, чтобы выбрать одно из действий с текстом или 0, чтобы завершить работу программы. 1 - вывести все предложения с датами, в которых есть текущий месяц и год. 2 - отсортировать предложения по увеличению минимальной даты в них. 3 - удалить все предложения, в которых все даты относятся к 19 веку. 4 - для каждого предложения вывести самую раннюю и самую позднюю даты. 0 - аварийно завершить программу.\n\n");
	int operation_selection;
	scanf("%d", &operation_selection);
	switch(operation_selection){
		case 0:
			printf("\n\n\tАварийное завершение программы пользователем.\n\n\n");
			for(int i = 0; i < n; i++){
				free(arr[i]);
			}
			return 0;
		case 1:
			printf("\n\n    Вы выбрали вывод предложений с датами этого месяца и этого года. Пожалуйста, введите строку в формате MM/YYYY, где MM - текущий месяц (если номер месяца меньше 10, то вводите с нулем, например 03), а УУУУ - текущий год.\n\n");
			scanf("%s", date);
			function_1(arr, &n, date);
			break;
		case 2:
			printf("\n\n\tВы выбрали сортировку предложений по увеличению минимальной даты в них. Функция пока в разработке.\n\n");
			break;
		case 3:
			printf("\n\n\tВы выбрали удаление всех предложений, в которых все даты относятся к 19 веку. Функция пока в разработке.\n\n");
			break;
		case 4:
			printf("\n\n\tВы выбрали вывод самых ранних и самых поздних дат для каждого предложения. Функция пока в разработке.\n\n");
			break;
		default:
			printf("\n\n\tВами были введены некорректные данные. Программа будет аварийно завершена!\n\n");
			for(int i = 0; i < n; i++){
                		free(arr[i]);
			}
			return 0;	
	}
	for(int i = 0; i < n; i++){
		free(arr[i]);
	}
	free(arr);
	free(s);
	return 0;
}

char* ReadSentence()
{
	char* s = malloc(10*sizeof(char));
	int n = 0;
	char c;
	int size = 10;
	while((c = getchar()) && c != '!' && c != '.' && c != ';' && c != '?' && c != '\n'){
		if(n == (size-2)){
			size += 10;
			s = realloc(s, size);
		}
		s[n] = c;
		++n;
	}
	s[n] = c;
	s[n+1] = '\0';
	return s;
}

char* DelTab(char* s)
{
	int k = 0;
	int length = strlen(s);
	if(s[0] == '\t'){
		while(k < length){
			s[k] = s[k+1];
			k++;
		}
	}	
	return s;
}

char* DelProbel(char* s)
{
	int i = 0;
	int length = strlen(s);
	if(s[0] == ' '){
		while(i < length){
			s[i] = s[i+1];
			i++;
		}
	}	
	return s;
}

int DoubleSentence(char** arr, int *n)
{
	int i = 0;
	int length = 0;
	length = *n;
	while(i < length - 1){
		for(int j = i + 1; j < length; j++){
		    if(strcmp(arr[i], arr[j]) == 0){
			free(arr[j]);
			for(int a = j; a < length - 1; a++){
				arr[a] = arr[a+1];
		    	}	
			length--;
			*n-=1;
			j--;
		    }
		}    
		i++;	
	}
}	

void function_1(char** arr, int* n, char* date)
{
        char* today = date;
        int length = *n;
        for(int i = 0; i < length; i++){
                if((strstr(arr[i], today)) != NULL){
                        printf("%s\n", arr[i]);
                }
        }
}
